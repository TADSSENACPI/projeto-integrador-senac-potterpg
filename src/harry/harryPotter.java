package harry;

import java.io.IOException;
import java.util.HashSet;
import java.util.Random;
import java.util.Scanner;
import java.util.Set;

public class harryPotter {

	static Scanner input = new Scanner(System.in);
	static int vida, xp, sleep = 5;
	static String modo;

	public static void main(String[] args) throws IOException, InterruptedException {

		vida = 3;
//
//		validaOpcoesMenu(showMenu());
		Fase2SegundaPergunta();

	}

	static void play() throws IOException, InterruptedException {

		Fase1PrimeiraPergunta();

	}

	public static void Fase1PrimeiraPergunta() throws IOException, InterruptedException {

		datilografa(sleep,
				"\nNeste inicio de torneio, você descobre que o obejtivo da primeira fase é recuperar um ovo\ndourado que está sendo guardado por um dragão."
						+ "\nO ovo está localizado dentro de uma ninhada de dragões reais. Cada um dos participantes vai ter que enfrentar um tipo de dragãoo para recuperar o ovo.\n"
						+ "\nAgora vamos sortear seu dragão, pressione ENTER para prosseguir:");
		System.in.read();

		int sorteioDragao = new Random().nextInt(4);
		datilografa(sleep, "\nO número " + sorteioDragao + " foi o número sorteado para você seguir sua história.");

		if (sorteioDragao == 0) {
			datilografa(sleep, "Com isso o dragão que vocÃª vai enfrentar é o Verde-GalÃªs Comum.\n");
			datilografa(sleep,
					"Esta raça está entre as que causam menos problemas (excetuando-se pela rara exceÃ§Ã£o do Incidente Ilfracombe)\n"
							+ "preferindo, como o Olho-de-Opala, caÃ§ar carneiros e se empenha para evitar os humanos, a nÃ£o ser quando provocado.\n"
							+ "O verde-galÃªs tem um urro surpreendentemente melodioso que Ã© facilmente reconhecÃ­vel.\n"
							+ "Suas labaredas saem em jorros finos e seus ovos sÃ£o cor de terra, sarapintados de verde");
		} else if (sorteioDragao == 1) {
			datilografa(sleep, "Com isso o dragÃ£o que vocÃª vai enfrentar Ã© o Meteoro-ChinÃªs.\n");
			datilografa(sleep,
					"O Meteoro-ChinÃªs Ã© de cor escarlate, possui escamas macias e uma franja de pontas douradas em volta do focinho\n"
							+ "e olhos extremamente protuberantes. Pesa entra duas e quatro toneladas.\n"
							+ "Ã‰ chamado de Meteoro por causa das esferas de fogo que solta pelas narinas quando enfurecido, que tomam o formato de cogumelos\n");
		} else if (sorteioDragao == 2) {
			datilografa(sleep, "Com isso o dragÃ£o que vocÃª vai enfrentar Ã© o Focinho-Curto Sueco.\n");
			datilografa(sleep,
					"Ã‰ uma das espÃ©cies mais perigosas, devido ao seu voo Ã¡gil e o fogo extremamente quente.\n"
							+ "O habitat natural dos Focinho-Curto suecos sÃ£o as montanhas gÃ©lidas, um paraÃ­so frio, porÃ©m admirÃ¡vel e muito bonito.\n"
							+ "Suas habilidades sÃ£o voar, expelir chamas, couraÃ§a resistente a Ã¡cidos e queimaduras graves.");
		} else if (sorteioDragao == 3) {
			datilografa(sleep,
					"Com isso o dragÃ£o que vocÃª vai enfrentar Ã© o Rabo-CÃ³rneo HÃºngaro.\nTem escamas negras, e aparÃªncia de lagarto. Ele tambÃ©m tem olhos amarelos, com pupilas verticais como as de um gato,\n"
							+ "chifres de bronze e picos coloridas semelhantes que se projetam a partir da sua longa cauda que ele usa em combate.\n"
							+ "O rugido do dragÃ£o Ã© um grito estridente, e sua chama pode chegar a cerca de 15 metros.\n");
		}
		System.out.println("\n\nPRESSIONE ENTER PARA PROSEGUIR: ");
		System.in.read();
		clearConsole();
		Fase1SegundaPergunta();
	}

	public static void Fase1SegundaPergunta() throws InterruptedException, IOException {

		int alternativas = 4;
		String resposta[] = new String[alternativas], correctAnswer;
		datilografa(sleep, "Boa, agora vamos para o que interessa...\nAgora que vocÃª ja descobriu seu dragÃ£o,\n"
				+ "voce está na arena, seu objetivo ao pegar o ovo, o dragao protege ele, seu dragÃ£o cospe fogo voce precisa se esconder.\n");

		resposta[0] = "\nEsconder\t| Se esconder nas rochas.\n";
		resposta[1] = "Corredor\t| Correr no corredor.\n";
		resposta[2] = "Ficar\t\t| Ficar pulando em cima das pedras.\n";
		resposta[3] = "Correr\t\t| Correr até o ovo.\n";

		System.out.println(resposta[0] + resposta[1] + resposta[2] + resposta[3]);
		System.out.println(
				"Digite apenas a primeira palavra de acordo com seu proximo passo para conseguir realizar mais um desafio!");
		do {
			verificaVida();
			System.out.print("\nESCOLHA: ");
			correctAnswer = input.next();

			switch (correctAnswer.toUpperCase()) {
			case "ESCONDER":
				System.out.println("\nVocê se escondeu nas rochas, está seguro agora.");
				xp = xp(xp);
				Fase1TerceiraPergunta();
				break;
			case "CORREDOR":
			case "FICAR":
			case "CORRER":
				System.out.println("Essa escolha fará com oque o dragão te coma.");
				vida = vida(vida, -1);

			}
		} while (correctAnswer.toUpperCase() != "ESCONDER");

	}

	public static void Fase1TerceiraPergunta() throws InterruptedException, IOException {

		String step;
		datilografa(sleep,
				"\nO dragão está cuspindo fogo na rocha. " + "Ela está esquentando, presisamos tomar uma decisão.\n");

		int alternativas = 4;
		String resposta[] = new String[alternativas];
		resposta[0] = "Ficar\t\t| Ficar na rocha, pois ela não esquentará muito.\n";
		resposta[1] = "Correr\t\t| Correr para outra rocha.\n";
		resposta[2] = "Direcao\t\t| Ir em direção ao ovo.\n";
		resposta[3] = "Vassoura\t| Chamar uma vassoura para voar.\n\n";
		for (String s : resposta) {
			datilografa(sleep, s);
		}

		datilografa(sleep,
				"Digite apenas a primeira palavra de acordo com seu próximo passo para conseguir realizar mais um desafio:\n");
		do {
			verificaVida();
			System.out.print("\nESCOLHA: ");
			step = input.next();
			String msg;
			System.out.println("\n");

			switch (step.toUpperCase()) {
			case "VASSOURA":

				datilografa(sleep, "Isso ai, sua vassoura esta a caminho, suba nela e vá á adiante.\n");
				xp = xp(xp);
				Fase1QuartaPergunta();
				break;
			case "FICAR":
			case "CORRER":
			case "DIRECAO":
				if (vida > 0) {
					msg = "\nEssa escolha fará com que o dragão te pegue, tente novamente.\n";
				} else if (vida <= 0) {
					msg = "";
				} else {
					msg = "";
				}
				datilografa(sleep, msg);
				vida = vida(vida, -1);
				xp();
			}

		} while (step.toUpperCase() != "VASSOURA");
	}

	public static void Fase1QuartaPergunta() throws InterruptedException, IOException {

		String pass;
		datilografa(sleep,
				"\nMais uma vez você pegou as dicas certas, continue...Você acaba de subir em sua vassoura mágica e agora tem que matar o dragão.\n"
						+ "Você começa a fazer com que ele te siga,"
						+ "mas acaba caindo de cima da vassoura e a ela fica presa no telhado do castelo um pouco afastado de você, restando apenas:\n");
		int alternativas = 4;
		String resposta[] = new String[alternativas];
		resposta[0] = "\nEsconder\t| Se esconder até o dragão ir embora\n";
		resposta[1] = "Feitico\t\t| Fazer um feitiço para a vassoura voltar para você.\n";
		resposta[2] = "Deslizar\t| Deslizar e pegar a vassoura.\n";
		resposta[3] = "Deixar\t\t| Deixar a vassoura lá.\n";
		datilografa(sleep, resposta[0] + resposta[1] + resposta[2] + resposta[3]);
		datilografa(sleep,
				"\nDigite apenas a primeira palavra de acordo com seu próximo passo para conseguir realizar mais um desafio:\n");

		do {
			verificaVida();
			System.out.print("\nESCOLHA: ");
			pass = input.next();

			switch (pass.toUpperCase()) {
			case "DESLIZAR":
				datilografa(sleep, "Deslizou e pegou, agora você consegue seguir.\n");
				xp = xp(xp);
				Fase1QuintaPergunta();
				break;
			case "ESCONDER":
			case "FEITICO":
			case "DEIXAR":
				vida = vida(vida, -1);
				System.out.println("Essa escolha fará com que o dragão te pegue, tente novamente.");
			}
		} while (pass.toUpperCase() != "DESLIZAR");
	}

	public static void Fase1QuintaPergunta() throws InterruptedException, IOException {

		String continues;
		datilografa(sleep,
				"\nContinue desse jeito, você nÃ£o perde dica alguma...\nVocÃª acaba de pegar sua vassoura e comeÃ§a a voar para se livrar novamente do dragÃ£o, vocÃª comeÃ§a a procurar saÃ­das em sua volta.\n\n"
						+ "No Leste vocÃª vÃª uma ponte com um espaÃ§o estreito para passar e o dragÃ£o nÃ£o consegue passar ali se nÃ£o vai bater e morrer.\n"
						+ "No oeste vocÃª olha e vÃª muita neblina, nÃ£o sabe se Ã© um caminho.\n "
						+ "Se olhar para o  norte vocÃª sÃ³ consegue ir reto e nÃ£o sabe onde vai parar.\n"
						+ "Se olhar para sul vai voltar para os castelos onde acabou de recuperar a vassoura.\n");
		int alternativas = 4;
		String resposta[] = new String[alternativas];

		resposta[0] = "\nNorte\t\t| Ir para o Norte\n";
		resposta[1] = "Sul\t\t| Ir para o Sul\n";
		resposta[2] = "Leste\t\t| Ir para o Leste\n";
		resposta[3] = "Oeste\t\t| Ir para o Oeste\n";

		datilografa(sleep, resposta[0] + resposta[1] + resposta[2] + resposta[3]);
		datilografa(sleep,
				"\nDigite uma saida de acordo com seu próximo passo para conseguir realizar mais um desafio:\n");

		do {
			verificaVida();
			System.out.print("\nESCOLHA: ");
			continues = input.next();

			switch (continues.toUpperCase()) {
			case "LESTE":
				datilografa(sleep,
						"Nessa você foi maldoso em hahaha, porém era a coisa certa a se fazer, siga em frente.\n");
				xp = xp(xp);
				Fase2PrimeiraPergunta();
				break;
			case "SUL":
			case "NORTE":
			case "OESTE":
				System.out.println("Essa escolha farÃ¡ com que o dragão de pegue, tente novamente.");
				vida = vida(vida, -1);
			}
		} while (continues.toUpperCase() != "LESTE");

	}

	public static void Fase2PrimeiraPergunta() throws InterruptedException, IOException {

		String resposta;

		datilografa(sleep,
				"Parabens !!! Você conseguiu o Ovo do dragão ... Agora é hora de descansar, estamos perto do baile de natal, até mais, bravo guerreiro...\n");
		clearConsole(0);
		datilografa(sleep,
				"Parece que Cedrico quer retribuir o favor que você fez a ele no desafio dos dragôes, ele quer falar algo...\n");

		datilografa(sleep,
				"Cedrico: Sabe o Banheiro dos monitores no 5º Piso ? É um bom lugar para um banho... Leve seu ovo e ilumine um pouco as coisas em baixo da água quente...");

		datilografa(sleep,
				"\nCedrico te deu uma dica, e agora, o que faremos? Vocï¿½ estï¿½ no 4ï¿½ andar da escola, Ao Sul estï¿½ a Biblioteca,vocï¿½ pode tentar procurar mais sobre o ovo nos livros. a norte vocï¿½ pode ver o Salï¿½o Principal, a Oeste tem uma escada que dï¿½ acesso ao banheiro do 5ï¿½ Piso, a oeste tem uma escada que dï¿½ acesso ao 3ï¿½ Piso...");

		datilografa(sleep,
				"  \nCedrico te deu uma dica, e agora, o que faremos? " + "Você está no 4º andar da escola.\n"
						+ "\nSul\t\t| Está a Biblioteca, você pode tentar procurar mais sobre o ovo nos livros.\n"
						+ "Norte\t\t| Você pode ver o Salão Principal.\n"
						+ "Oeste\t\t| Tem uma escada que da acesso ao banheiro do 5º Piso.\n"
						+ "Leste\t\t| Tem uma escada que dá acesso ao 3º Piso...\n");
		do {
			verificaVida();

			System.out.print("\n\nESCOLHA A DIREÇÃO: ");
			resposta = input.next();

			if (resposta.equalsIgnoreCase("Norte")) {
				datilografa(sleep, " Salão principal ?... Não parece ser o melhor lugar para se tomar um banho!\n");
				vida = vida(vida, -1);
			} else if (resposta.equalsIgnoreCase("Sul")) {
				datilografa(sleep, "\nÉ para lavar seu ovo, não para ler para ele!\n");
				vida = vida(vida, -1);
			} else if (resposta.equals("Leste")) {
				datilografa(sleep, "\nÉ para lavar seu ovo, não para ler para ele!\n");
				vida = vida(vida, -1);
			} else if (resposta.equalsIgnoreCase("Oeste")) {
				datilografa(sleep,
						"\nBoa! Agora siga o conselho que Cedrico te deu e tome um banho com seu ovo no banheiro dos monitores... "
								+ "Mas cuidado viu, pode ter seres estranhos lá... \n");
				xp = xp(xp);
				Fase2SegundaPergunta();
			} else {
				datilografa(sleep, "Digite uma das opções válidas!");
			}
			resposta = resposta.trim();
		} while (!resposta.equalsIgnoreCase("Oeste"));

	}

	public static void Fase2SegundaPergunta() throws InterruptedException, IOException {

		String resposta;

		clearConsole(0);
		datilografa(sleep,
				"\nQue barulho é esse? Parece que o Ovo tem uma musica que só se escuta em baixo d'água: \n" + "\n"
						+ "	Onde ouvir da nossa vor o tom" + "\n" + "	na superficie não há som " + "\n"
						+ "	Durante uma hora deve buscar" + "\n" + "	E o que quer vai encontrar \n" + "\n"
						+ "Nossa!! Parece o canto dos Sereianos... " + "\n"
						+ "Vamos!! você só tem algumas horas para 2º tarefa...\n");

		datilografa(sleep, "Oh não! Parece que você dormiu...");
		datilografa("\n\n	TECLE ENTER PARA ACORDAR!");
		clearConsole();
		datilografa(sleep, "\nEstá na hora da 2º tarefa!!! " + "\n"
				+ "\nVocê precisa encontrar seu amigo Ronald no fundo do Lago Negro e você só tem uma hora para isso..."
				+ "\nAllastor Olho-Tonto te entregou um guelrricho, vai te ajudar na procura, coma rápido!!");
		datilografa(sleep, "Seus oponentes sairam na sua frente, nadaram rapidamente para o norte... "
				+ "\n Cuidado para não se perder no caminho, lembre-se, seu objetivo é salvar o que você ama, seu amigo...");

		do {
			verificaVida();
			datilografa(sleep, "\nOnde você quer procurar? Selecione para qual lado você quer ir:\n\nNorte\t\t| Ir para o Norte.\nSul\t\t| Ir para o Sul.\nLeste\t\t| Ir para o Leste.\nOeste\t\t| Ir para o Oeste.");
			datilografa("\n\nESCOLHA: ");
			resposta = input.next();
			resposta = resposta.toUpperCase();
			resposta = resposta.trim();

			if (resposta.equals("NORTE")) {
				System.out.println(
						"Isso! Seus adversários podem dar boas pistas de onde seguir, agora vamos atrás do Rony! ");
				xp = xp(xp);
				Fase2TerceiraPergunta();
				break;
			} else if (resposta.equals("SUL")) {
				System.out.println(
						"Ir ao contrário da maioria nesse caso pode te atrapalhar, talvez eles saibam um caminho diferente do que você imaginou... ");
				vida = vida(vida, -1);
			} else if (resposta.equals("LESTE")) {
				System.out.println("Por ai não, só tem barreiras que pode te atrapalhar..");
				vida = vida(vida, -1);
			} else if (resposta.equals("OESTE")) {
				System.out.println("\n" + "Não parece ser o melhor local, acho que você só vai perder tempo... ");
				vida = vida(vida, -1);
			} else {
				System.out.println("Digite uma resposta válida");
			}

		} while (!resposta.equals("Norte"));

	}

	public static void Fase2TerceiraPergunta() throws InterruptedException, IOException {

		String resposta;

		datilografa(sleep,
				"Parece que jï¿½ estou vendo um sereiano e ao lado dele parece que ï¿½ o... RONY !!! Vamos atrï¿½s dele!!");
		datilografa(sleep,
				"Droga, parece que seus 2 adversï¿½rios foram mais rï¿½pido que vocï¿½ e jï¿½ cumpriram o objetivo, porï¿½m Rony nï¿½o estï¿½ sozinho, tem outra pessoa desmaiada ao lado dele..."
						+ "\nParece que ï¿½ a Gabrielle, irmï¿½ de Fleur, seu oponente, ele nï¿½o vai conseguir completar a prova pois teve problema com os Grindylows, os diabos marinhos, vocï¿½ vai deixar ela sozinha ? "
						+ "\nLembre-se nï¿½o ï¿½ somente cumprir a prova para ganhar o torneio tribruxo, para ser um verdadeiro Bruxo precisamos de mais...");

		datilografa(sleep,
				"O que vocï¿½ quer fazer agora? \n\nA) Salvar Rony \nB) Salvar Rony e Gabrielle \nC) Desistir do Torneio");
		do {
			verificaVida();
			datilografa(sleep, "\n\nESCOLHA: ");
			resposta = input.next();

			if (resposta.equalsIgnoreCase("A")) {
				datilografa(sleep,
						"\nVocï¿½ conseguiu salvar Rony porï¿½m chegou em 3ï¿½ lugar, nï¿½o hï¿½ mais chances de ganhar o Torneio... ");
				vida = vida(vida, -1);
			} else if (resposta.equalsIgnoreCase("B")) {
				datilografa(sleep,
						"\nParabï¿½ns!! Tenho certeza que os juizes levarï¿½o em conta sua bravura e compaixï¿½o, como um verdadeiro bruxo, agora vamos terminar o desafio!\n");
				xp = xp(xp);
				Fase2QuartaPergunta();
				/**
				 * ATENÇÃO NESSA CONDIÇÃO
				 */
			} else if (resposta.equals("C")) {
				datilografa(sleep, "\nPuxa, uma pena você não querer continuar...");
				vida = vida(vida, -1);
			} else {
				datilografa(sleep, "\nDigite uma resposta válida!");

			}

		} while (!resposta.equalsIgnoreCase("B"));

	}

	public static void Fase2QuartaPergunta() throws InterruptedException, IOException {

		String resposta;

		datilografa(sleep, "O que é isso ? "
				+ "\nAh não, são os Grindylows e eles não querem deixar você levar a irmã de Fleur, o que faremos agora?");

		datilografa(sleep,
				"\n\nA)Soltar um feitiço nos Grindylows e se libertar deles." + "\nB)Desistir de levar Gabrielle.\n");

		do {
			verificaVida();
			datilografa(sleep, "\nESCOLHA: ");
			resposta = input.next();

			if (resposta.equalsIgnoreCase("A")) {
				datilografa(sleep,
						" Bravo nobre bruxo ! Vocï¿½ chegou em 3ï¿½ lugar porï¿½m os juï¿½zes viram sua dedicaï¿½ï¿½o e companheirismo e como forma de bonificaï¿½ï¿½o te beneficiaram com o 2ï¿½ lugar "
								+ "\nVocï¿½ passou de fase !!");
				xp = xp(xp);
				fase3PrimeiraPergunta();

			} else if (resposta.equalsIgnoreCase("B")) {
				datilografa(sleep,
						"Vocï¿½ conseguiu salvar Rony porï¿½m chegou em 3ï¿½ lugar, nï¿½o hï¿½ mais chances de ganhar o Torneio... ");
				vida = vida(vida, -1);
			} else {
				datilografa(sleep, "Digite uma resposta vï¿½lida");
			}

		} while (!resposta.equalsIgnoreCase("A"));

	}

	public static void fase3PrimeiraPergunta() throws InterruptedException, IOException {
		datilografa(sleep, "\t\tBEM VINDO A FASE 3!\n\n"
				+ "Parabens voce chegou até aqui, ao passar do lago, voce agora tem um novo desafio! para ser o campeao"
				+ " tribuxo voce precisa passar pelo labirinto e pegar o calice." + "\n"
				+ "Todos os participantes incluindo voce entram no labirinto e comecam a tentar encontrar o caminho certo."
				+ "\n");
		datilografa(sleep, "\nTECLE ENTER PARA CONTINUAR: ");
		clearConsole();
		String alternativa;

		datilografa(sleep,
				"\nVoce esta no meio do labirinto, derrepente houve um barulho de gritos, voce corre para "
						+ "ver o que aconteceu, voce ve uma competidora desmaiada. " + "\n"
						+ "Por causa de victor crum outro adversario, ela esta¡ sendo sugada pelo labirinto voce pode :"
						+ "\n\nA) Tenta soltar com as maos impedir que ela seja sugada." + "\n"
						+ "B) Joga um feitico na parede \n"
						+ "C) Jogar um feitico de localizacao para os professores dela virem.\n"
						+ "D) NÃ£o faz nada. Deixa ela la¡.\n" + "E) Gritar pedindo ajuda para outro competidor.");
		do {
			verificaVida();
			datilografa(sleep, "\n\nESCOLHA: ");
			alternativa = input.next();
			alternativa = alternativa.toUpperCase();
			if (alternativa.equalsIgnoreCase("A")) {

				datilografa(sleep, " Com essa tentativa voce foi sugado tambem.\n");

				vida = vida(vida, -1);
			} else if (alternativa.equalsIgnoreCase("B")) {
				datilografa(sleep, "O feitico foi inutil, ela morreu.\n");

				vida = vida(vida, -1);
			} else if (alternativa.equals("C")) {

				datilografa(sleep, "Muito bom por sua atitude ela foi salva e voce pode proseguir com seu teste.\n");
				xp = xp(xp);
				fase3SegundaPergunta();
				break;
			} else if (alternativa.equalsIgnoreCase("D")) {

				datilografa(sleep, "Por essa atitude ela morreu e vocÃª foi desclassificado.\n");
				vida = vida(vida, -1);
			} else if (alternativa.equalsIgnoreCase("E")) {

				datilografa(sleep, "Ninguem veio te ajudar e a mulher morreu.\n");
				vida = vida(vida, -1);
			} else {

				System.out.println("Digite um numero válido!");
			}

//		} while (!alternativa.equalsIgnoreCase("C"));
		} while (alternativa.toUpperCase() != "C");

	}

	public static void fase3SegundaPergunta() throws InterruptedException, IOException {

		String alternativa;
		System.out.println("Ao jogar o feitico  de localizacao  o labirinto comeca a " + "fechar  voce comeca a correr."
				+ "\n" + "Voce percebe que tem dois competidores brigando com suas varinhas, "
				+ "um dele estao enfeiticado," + "cedrico ganha dele , \nentretando depois de ter derrotado ele, "
				+ "cedrigo quer matar ele pelo o que fez com a outra" + " competidora, agora vocÃª\n" + "\n"
				+ "A) Deixa cedrico matar ele afinal quase matou a outra competidora." + "\n"
				+ "B) Mata cedrico impedindo ele." + "\n" + "C) Segura ele explicando que ele apenas esta enfeiticado."
				+ "\n" + "D) Joga um feitico contra cedrico deixando ele desmaiado. ");
		do {
			verificaVida();
			datilografa(sleep, "\n\nESCOLHA: ");
			alternativa = input.next();
			alternativa = alternativa.toUpperCase();
			if (alternativa.equalsIgnoreCase("A")) {

				System.out.println("Voce dois foram desclassificados por matar.");
				vida = vida(vida, -1);

			} else if (alternativa.equalsIgnoreCase("B")) {

				System.out.println("Voce foi  desclassificados por matar.");

				vida = vida(vida, -1);
			} else if (alternativa.equalsIgnoreCase("C")) {

				System.out.println("Muito bem agora voces podem prosseguir.");
				xp = xp(xp);
				fase3TerceiraPergunta();
				break;

			} else if (alternativa.equalsIgnoreCase("D")) {

				System.out.println("Você precisava do Cedrico para continuar.");

				vida = vida(vida, -1);
			} else {
				System.out.println("Digite um valor válido!");
			}

		} while (!alternativa.equals("C"));

	}

	public static void fase3TerceiraPergunta() throws InterruptedException, IOException {

		String alternativa;
		System.out.println("\nDepois de convencer cedrico eles deixam o outro competidor ali,"
				+ " em seguida comeca a correr ao  fim do labirinto, \n"
				+ "voce olha o calice de longe e comecam a disputar entre si correndo,"
				+ "que cedrico  pego pelos galhos do labirinto esta prestes a morrer, \n"
				+ "mas o calice esta logo ali. Voce" + " : \n" + "\n"
				+ "A) Deixa cedrico e vai atÃ© o calice para ganhar o jogo." + "\n"
				+ "B) Da um sinal de localizacAo e vai ate o calice." + "\n"
				+ "C) Joga um feitiÃ§o em cedrico para que ele para de gritar." + "\n"
				+ "D) Salva cedrico com um feitico nas plantas, tirando ele de lÃ¡" + "\n"
				+ "E) Se oferece como distracao para que ele escape.");
		do {
			verificaVida();
			datilografa(sleep, "\n\nESCOLHA: ");
			alternativa = input.next();

			if (alternativa.equalsIgnoreCase("a")) {

				System.out.println("por sua causa cetrico morreu voce precisava dele");

				vida = vida(vida, -1);
			} else if (alternativa.equalsIgnoreCase("B")) {

				System.out.println("nesse caso o labirinto estava muito mais agressivo e cetrico morreu, "
						+ "voce precisava dele");

				vida = vida(vida, -1);
			} else if (alternativa.equalsIgnoreCase("C")) {

				System.out.println("por sua causa cetrico morreu voce precisava dele");
				xp = xp(xp);
				fase3QuartaPergunta();
				break;
			} else if (alternativa.equalsIgnoreCase("D")) {

				System.out.println("muito bem, sempre se salva um amigo");

				vida = vida(vida, -1);
			} else if (alternativa.equalsIgnoreCase("E")) {

				System.out.println("Cetrico conseguiu escapar mas voce morreu.");

				vida = vida(vida, -1);
			} else {
				System.out.println("digite um valor valido");
			}

		} while (!alternativa.equalsIgnoreCase("D"));

	}

	public static void fase3QuartaPergunta() throws InterruptedException, IOException {

		String alternativa;
		System.out.println("Ao voce salvar cedrico o labirinto todo comeca"
				+ " fechar voce comeca a correr de novo, ao chegar perto " + "do calice voce decide " + "\n" + "\n"
				+ "A) Deixar que vocÃª pegue afinal salvou cedrico ." + "\n" + "B) Dar o calice a ele " + "\n"
				+ "C) Decidem que vao ir juntos pegar o calice. " + "\n" + "D) nao pegar nenhum dos dois. +" + "\n"
				+ "E) Lutar contra cedrico para ver quem merece o calice");
		do {
			verificaVida();
			datilografa(sleep, "\n\nESCOLHA: ");
			alternativa = input.next();

			if (alternativa.equalsIgnoreCase("a")) {

				System.out.println("Voce precisava do cedrico para prosseguir");

				vida = vida(vida, -1);
			} else if (alternativa.equalsIgnoreCase("B")) {

				System.out.println("o cedrico nao poderia ter ganhado sozinho...");

				vida = vida(vida, -1);
			} else if (alternativa.equalsIgnoreCase("C")) {

				System.out.println("muito bem voces ganharam juntos! ");
				xp = xp(xp);
				Fase4PrimeiraPergunta();
				break;
			} else if (alternativa.equalsIgnoreCase("D")) {

				System.out.println("o labirinto se fechou e vocÃªs dois morreram");

				vida = vida(vida, -1);
			} else if (alternativa.equalsIgnoreCase("E")) {

				System.out.println("Voces dois acabam morrendo pelo labirinto que fechou");

				vida = vida(vida, -1);
			} else {
				System.out.println("digite um valor valido");
			}

		} while (!alternativa.equalsIgnoreCase("c"));

	}

	public static void Fase4PrimeiraPergunta() throws InterruptedException, IOException {
		String step;

		datilografa(sleep, "Parabéns, você conseguiu superar todos os desafios!\n");
		datilografa(sleep, "TECLE ENTER PATA CONTINUAR: ");
		clearConsole();
		datilografa(sleep,
				"Harry e seu amigo Cedrico chegam em Little Hangleton. Mas... espere... Aquele nãoo é o... RABICHO?.\n"
						+ "E ele está estranho... Ele foi enfeitiÃ§ado pelo Valdemort e está usando um feitiço contra Cedrico, oque você ira fazer?\n");

		datilografa(sleep,
				"Digite apenas a primeira palavra de acordo com seu prÃ³ximo passo para conseguir realizar mais um desafio:\n");

		do {
			datilografa(sleep, "\nEsconder\t\t| Se esconder e esperar Rabicho usar a maldição da morte Avada Kedavra.");
			datilografa(sleep, "\nFeitico\t\t| Utilizar um feitiço contra o Rabicho.");
			datilografa(sleep, "\nEsconder\t\t| Se esconder do Rabicho.");
			datilografa(sleep, "\nCorrer\t\t| Correr em direção ao Rabicho e tirar a varinha mágica dele.\n");

			step = input.next();
			System.out.println("\n");

			switch (step.toUpperCase()) {
			case "ESCONDER":
				datilografa(sleep,
						"Infelizmente essa opÃ§Ã£o acabou matando Cedrico... E vocÃª foi preso pelo Rabicho no tÃºmulo de Tom Riddle Sr..\n");
				break;
			case "FEITIÃ‡O":
				datilografa(sleep,
						"Essa escolha farÃ¡ com que o Rabicho consiga usar um feitiÃ§o e te matar. Tente novamente.");
				break;
			case "ESC":
				datilografa(sleep,
						"Essa escolha farÃ¡ com que o Rabicho consiga usar um feitiÃ§o e te matar. Tente novamente.");
				break;
			case "CORRER":
				datilografa(sleep,
						"Essa escolha farÃ¡ com que o Rabicho consiga usar um feitiÃ§o e te matar. Tente novamente.");
				break;
			default:
				System.out.println("Escolha uma resposta válida.");
			}
		} while (step.equalsIgnoreCase("ESCONDER"));
	}

	public static void Fase4SegundaPergunta() {
		// String second
		String pass;
		int i = 1;
		System.out.println("Agora que chegou atÃ© aqui, deverÃ¡ encontrar uma forma de sair do tÃºmulo.\n"
				+ "Mas... como vocÃªdeverÃ¡ sair dele?\n");

		do {
			System.out.println(
					"Cavar - Cavar por dentro do tumulo onde estÃ¡ escondido. \n Aceitar - Aceitar que o Rabicho colete o seu sangue, um osso desenterrado do tÃºmulo do Riddle e uma de suas prÃ³prias mÃ£os. \n"
							+ "FeitiÃ§o -  Utilizar um feitiÃ§o para que se teletransporte para outro lugar.\n Esperar - Esperar Rabicho aparecer, jogÃ¡-lo dentro do tÃºmulo e trancar ele lÃ¡ dentro");
			System.out.println(
					"Digite apenas a primeira palavra de acordo com seu prÃ³ximo passo para conseguir realizar mais um desafio:\n");
			pass = input.next();

			System.out.println("\n");

			switch (pass.toUpperCase()) {
			case "ACEITAR":
				System.out.println(
						"Oh nÃ£o! Essa opÃ§Ã£o fez com que Valdemort tenha seu corpo regenerado! Ele agora estÃ¡ mais poderoso do que nunca! Valdemort pegou sua varinha e, atravÃ©s da Marca Negra no braÃ§o de Pettigrew, convocou os Comensais da Morte.\n\n\n");
				break;
			case "ESCONDER":
				System.out.println("Essa escolha farÃ¡ com que vocÃª fique preso dentro do tÃºmulo. tente novamente.");
				i++;
				break;
			case "FEITIÃ‡O":
				System.out.println("Essa escolha farÃ¡ com que vocÃª fique preso dentro do tÃºmulo. tente novamente.");
				i++;
				break;
			case "DEIXAR":
				System.out.println("Essa escolha farÃ¡ com que vocÃª fique preso dentro do tÃºmulo. tente novamente.");
				i++;
				break;
			default:
				System.out.println("Escolha uma resposta vÃ¡lida.");
			}
		} while (i <= 3 && !(pass.equalsIgnoreCase("ACEITAR")));
		{
			if (i > 3) {
				System.out.println("VocÃª perdeu todas as suas vidas. FIM DE JOGO.");
				System.exit(i);
			}
		}
	}

	public static void Fase4TerceiraPergunta() {
		String pass;
		int i = 1;
		System.out.println(
				"ApÃ³s ter que precensiar esta cena de valdemort voltando a vida, vocÃª terÃ¡ que enfrentar ele e usar todas suas forÃ§as! Mas antes disso, vocÃª precisa pensar bem nos seus prÃ³ximos passos. Para onde seguir?\n");
		do {
			System.out.println(
					"Norte - Ir para o norte do cemitÃ©rio e tentar encontrar a saÃ­da. \n Local - Continuar no mesmo local e enfrentar Valdemort. \n  Sul -  Ir para o sul do cemitÃ©rio e seguir o caminho do rio para chegar a uma cabana e se esconder.\n"
							+ "Juntar - Se juntar aos comensais da morte, afinal, vocÃª nÃ£o conseguirÃ¡ derrotÃ¡-los\n");

			System.out.println(
					"Digite apenas a primeira palavra de acordo com seu prÃ³ximo passo para conseguir realizar mais um desafio:\n");
			pass = input.next();

			System.out.println("\n");

			switch (pass.toUpperCase()) {
			case "LOCAL":
				System.out.println("Boa escolha! O duelo entre vocÃªs estÃ¡ prestes a comeÃ§ar! ");
				break;
			case "NORTE":
				System.out.println("Essa escolha farÃ¡ com que o Voldemort te pegue, tente novamente.");
				i++;
				break;
			case "JUNTAR":
				System.out.println("Essa escolha farÃ¡ com que o Voldemort te pegue, tente novamente.");
				i++;
				break;
			case "SUL":
				System.out.println("Essa escolha farÃ¡ com que o Voldemort te pegue, tente novamente.");
				i++;
			default:
				System.out.println("Escolha uma resposta vÃ¡lida.");
			}
		} while (i <= 3 && !(pass.equalsIgnoreCase("LOCAL")));
		{
			if (i > 3) {
				System.out.println("VocÃª perdeu todas as suas vidas. FIM DE JOGO.");
				System.exit(i);
			}
		}
	}

	public static void Fase4QuartaPergunta() {
		// String fourth
		String pass;
		int i = 1;
		System.out.println(
				"Sendo assim, Valdemort ordenou Rabicho a dar-lhe uma varinha. Ele ordenou que vocÃª se curve diante dele, o que vocÃª faz:\n\n\n");
		do {
			System.out.println(
					"Obedecer - Obedece o Valdemort afinal, estÃ¡ sendo controlado pelo feitiÃ§o.\n NÃ£o - NÃ£o obedece os comandos do Valdemort pois vocÃª nÃ£o o respeita como um mestre a ser seguido.\n FeitiÃ§o - VocÃª lanÃ§a um feitiÃ§o contra Valdemort, matando ele.\n Correr - VocÃª sai correndo pelo cemitÃ©rio para fugir dele e de todos os comensais da morte\n");

			System.out.println(
					"Digite apenas a primeira palavra de acordo com seu prÃ³ximo passo para conseguir realizar mais um desafio:\n");
			pass = input.next();

			System.out.println("\n");

			switch (pass.toUpperCase()) {
			case "OBEDECER":
				System.out.println("Sim... infelizmente vocÃª teve que obedecer aos comandos dele...");
				break;
			case "NÃƒO":
				System.out.println("Essa escolha farÃ¡ com que Voldemort te pegue, tente novamente.");
				i++;
				break;
			case "FEITIÃ‡O":
				System.out.println("Essa escolha farÃ¡ com que Voldemort te pegue, tente novamente.");
				i++;
				break;
			case "CORRER":
				System.out.println("Essa escolha farÃ¡ com que Voldemort te pegue, tente novamente.");
				i++;
				break;
			default:
				System.out.println("Escolha uma resposta vÃ¡lida.");
			}
		} while (i <= 3 && !(pass.equalsIgnoreCase("OBEDECER")));
		{
			if (i > 3) {
				System.out.println("VocÃª perdeu todas as suas vidas. FIM DE JOGO.");
				System.exit(i);
			}
		}
	}

	public static void Fase4QuintaPergunta() {
//		  String fifth
		String pass;
		int i = 1;
		System.out.println(
				"Mas veja! Agora vocÃª Ã© capaz de resistir ao feitiÃ§o desta vez. Surpreso com sua resistÃªncia para a MaldiÃ§Ã£o, Voldemort disparou outro feitiÃ§o, e vocÃª sem pensar duas vezes: \n\n\n");

		do {
			System.out.println("Pedra - Se escondeu atrÃ¡s de uma pedra para desviar do feitiÃ§o.\n"
					+ "EstÃ¡tua - Se escondeu trÃ¡s de uma estÃ¡tua para desviar do feitiÃ§o.\n"
					+ "FeitiÃ§o - Bloqueia o feitiÃ§o com outro feitiÃ§o.\n "
					+ "Rastejar - Foi atingido pelo feitiÃ§o e saiu rastejando tentando se esconde atrÃ¡s de uma pedra.\n");

			System.out.println(
					"Digite apenas a primeira palavra de acordo com seu prÃ³ximo passo para conseguir realizar mais um desafio:\n");
			pass = input.next();

			System.out.println("\n");

			switch (pass.toUpperCase()) {
			case "PEDRA":
				System.out.println("Uffa essa foi por pouco!");
				break;
			case "ESTATUA":
				System.out.println("Essa escolha farÃ¡ com que Voldemort te pegue, tente novamente.");
				i++;
				break;
			case "FEITIÃ‡O":
				System.out.println("Essa escolha farÃ¡ com que Voldemort te pegue, tente novamente.");
				i++;
				break;
			case "RASTEJAR":
				System.out.println("Essa escolha farÃ¡ com que Voldemort te pegue, tente novamente.");
				i++;
				break;
			default:
				System.out.println("Escolha uma resposta vÃ¡lida.");
			}
		} while (i <= 3 && !(pass.equalsIgnoreCase("PEDRA")));
		{
			if (i > 3) {
				System.out.println("VocÃª perdeu todas as suas vidas. FIM DE JOGO.");
				System.exit(i);
			}
		}
	}

	public static void Fase4SextaPergunta() {
		String pass;
		int i = 1;
		System.out.println(
				"No entanto, vocÃª, percebendo que nÃ£o havia nenhuma maneira de escapar, decidiu que, se ia morrer, iria morrer lutando, e nÃ£o se encolhendo para longe e se escondendo. Com isso, vocÃª saiu de trÃ¡s da pedra para enfrentar Voldemort. VocÃªs dois usaram dois feitiÃ§os ao mesmo tempo, Valdemort usou o Expelliarmus. Escolha seu feitiÃ§o::\n\n\n");

		do {
			System.out.println("Imperius - Imperius  \n " + "Expelliarmus - Expelliarmus \n"
					+ "Avada - Avada Kedavra \n" + "Leviosa - Leviosa  \n");

			System.out.println(
					"Digite apenas a primeira palavra de acordo com seu prÃ³ximo passo para conseguir realizar mais um desafio:\n");
			pass = input.next();

			System.out.println("\n");
			switch (pass.toUpperCase()) {
			case "EXPELLIARMUS":
				System.out.println(
						"ApÃ³s as varinhas colidirem e vocÃŠ conseguir o dominio dos feitiÃ§os, ele usou um FeitiÃ§o de ConvocaÃ§Ã£o para pegar a Chave de Portal e aparecer de volta a Hogwarts, segurando o cadÃ¡ver de Diggory...");
				System.out.println(
						"ParabÃ©ns! Chegar aqui nÃ£o foi uma tarefa fÃ¡cil, mas vocÃª, como um fÃ£ de Harry Potter, foi fÃ¡cil chegar atÃ© aqui!Obrigada por jogar e espero que tenha se divertido!");
				break;
			case "IMPERIUS":
				System.out.println("Essa escolha farÃ¡ com que Voldemort te pegue, tente novamente.");
				i++;
				break;
			case "AVADA":
				System.out.println("Essa escolha farÃ¡ com que Voldemort te pegue, tente novamente.");
				i++;
				break;
			case "LEVIOSA":
				System.out.println("Essa escolha farÃ¡ com que Voldemort te pegue, tente novamente.");
				i++;
				break;
			default:
				System.out.println("Escolha uma resposta valida.");
			}
		} while (i <= 3 && !(pass.equalsIgnoreCase("EXPELLIARMUS")));
	}

	static int vida(int vida, int condicao) {
		vida = vida + condicao;
		System.err.print("VIDAS RESTANTES: " + vida);
		return vida;
	}

	static int xp(int xp) {
		xp += 150;
		System.err.println("XP: " + xp);
		return xp;
	}

	static void xp() {
		System.err.println(" | XP: " + xp);
	}

	static void validaOpcoesMenu(String opcao) throws IOException, InterruptedException {
		Set<String> opcoesSet = new HashSet<String>();
		opcoesSet.add("1");
		opcoesSet.add("2");
		opcoesSet.add("3");
		opcoesSet.add("4");
		opcao = opcao.trim();
		if (opcao.equals("1")) {
			// Chamar metodo responsavel
		}
		if (opcao.equals("2")) {
			play();
		}
		if (opcao.equals("3")) {
			// Chamar metodo responsavel
		}
		if (opcao.equals("4")) {
			System.out.println("\n\nFIM!");
			System.exit(0);
		}
		if (!opcoesSet.contains(opcao)) {
			throw new UnsupportedOperationException("Opção invalida!");
		}
	}

	static String showMenu() throws InterruptedException, IOException {
		System.err.println(
				"********************************\n************* MENU *************\n********************************");
		System.out.println("");
		datilografa(sleep, "1 - INSTRUÇÕES\n2 - JOGAR\n3 - RANKING\n4 - EXIT\nR = ");
		return input.next();
	}

	static void clearConsole() throws IOException, InterruptedException {
		int inteiro = System.in.read();
		if (System.getProperty("os.name").contains("Windows"))
			new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		else
			Runtime.getRuntime().exec("clear");
	}

	static void clearConsole(int valor) throws IOException, InterruptedException {
		Thread.sleep(valor);
		if (System.getProperty("os.name").contains("Windows"))
			new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
		else
			Runtime.getRuntime().exec("clear");
	}

	static void datilografa(String string) throws InterruptedException, IOException {
		for (int i = 0; i < string.length(); i++) {
			char caractere = string.charAt(i);
			Thread.sleep(5);
			System.out.print(caractere);
		}
		clearConsole();
	}

	static void datilografa(int tempo, String string) throws InterruptedException, IOException {
		for (int i = 0; i < string.length(); i++) {
			char caractere = string.charAt(i);
			Thread.sleep(tempo);
			System.out.print(caractere);
		}
	}

	static void verificaVida() throws InterruptedException, IOException {
		if (vida <= 0) {
			datilografa(sleep, "\nVOCÊ MORREU!\n");
			datilografa(sleep, "VOCÊ ALCANÇOU " + xp + " DE XP.");
			System.exit(0);
		}
	}
}
